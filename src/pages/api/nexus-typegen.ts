/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context } from "./../../lib/prisma/index"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenObjects {
  Gallery: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    disabled: boolean; // Boolean!
    id: string; // String!
    owner: string; // String!
    value: string; // String!
  }
  Image: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    disabled: boolean; // Boolean!
    galleryId: string; // String!
    id: string; // String!
    value: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    email: string; // String!
    expires: string; // String!
    id: string; // String!
    refresh: string; // String!
    token: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Gallery: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    disabled: boolean; // Boolean!
    id: string; // String!
    images: NexusGenRootTypes['Image'][] | null; // [Image!]
    owner: string; // String!
    value: string; // String!
  }
  Image: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    disabled: boolean; // Boolean!
    galleryId: string; // String!
    id: string; // String!
    value: string; // String!
  }
  Mutation: { // field return type
    createGallery: NexusGenRootTypes['Gallery'] | null; // Gallery
    createImage: NexusGenRootTypes['Image'] | null; // Image
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteGallery: boolean | null; // Boolean
    deleteImage: boolean | null; // Boolean
    updateImage: boolean | null; // Boolean
  }
  Query: { // field return type
    allGallery: Array<NexusGenRootTypes['Gallery'] | null> | null; // [Gallery]
    gallery: NexusGenRootTypes['Gallery'] | null; // Gallery
    signIn: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    email: string; // String!
    expires: string; // String!
    id: string; // String!
    refresh: string; // String!
    token: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Gallery: { // field return type name
    createdAt: 'Date'
    disabled: 'Boolean'
    id: 'String'
    images: 'Image'
    owner: 'String'
    value: 'String'
  }
  Image: { // field return type name
    createdAt: 'Date'
    disabled: 'Boolean'
    galleryId: 'String'
    id: 'String'
    value: 'String'
  }
  Mutation: { // field return type name
    createGallery: 'Gallery'
    createImage: 'Image'
    createUser: 'User'
    deleteGallery: 'Boolean'
    deleteImage: 'Boolean'
    updateImage: 'Boolean'
  }
  Query: { // field return type name
    allGallery: 'Gallery'
    gallery: 'Gallery'
    signIn: 'User'
  }
  User: { // field return type name
    email: 'String'
    expires: 'String'
    id: 'String'
    refresh: 'String'
    token: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createGallery: { // args
      background: string; // String!
    }
    createImage: { // args
      galleryId: string; // String!
      value: string; // String!
    }
    createUser: { // args
      email: string; // String!
      password: string; // String!
    }
    deleteGallery: { // args
      id: string; // String!
    }
    deleteImage: { // args
      id: string; // String!
    }
    updateImage: { // args
      disabled?: boolean | null; // Boolean
      id: string; // String!
      value?: string | null; // String
    }
  }
  Query: {
    gallery: { // args
      id: string; // String!
    }
    signIn: { // args
      email: string; // String!
      password: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}